import React, { useState } from 'react';
import { 
  BookOpen, 
  Star, 
  Code, 
  FolderTree, 
  Play, 
  FileText, 
  Clock, 
  TrendingUp,
  Copy,
  Download,
  Check
} from 'lucide-react';
import { CodeSummary as CodeSummaryType } from '../types/github';

interface CodeSummaryProps {
  summary: CodeSummaryType;
  repositoryName: string;
}

export const CodeSummary: React.FC<CodeSummaryProps> = ({ summary, repositoryName }) => {
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  const getComplexityColor = (complexity: string) => {
    switch (complexity.toLowerCase()) {
      case 'low': return 'text-green-600 bg-green-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'high': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const copyToClipboard = async (text: string, section: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(section);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const downloadSummary = () => {
    const summaryText = `
# ${repositoryName} - Code Summary

## Overview
${summary.overview}

## Key Features
${summary.keyFeatures.map(feature => `• ${feature}`).join('\n')}

## Tech Stack
${summary.techStack.map(tech => `• ${tech}`).join('\n')}

## Project Structure
${summary.projectStructure}

## Getting Started
${summary.gettingStarted}

## Main Files
${summary.mainFiles.map(file => `• ${file}`).join('\n')}

## Complexity: ${summary.complexity}
## Estimated Reading Time: ${summary.estimatedReadingTime}

Generated by GitZen on ${new Date().toLocaleString()}
    `.trim();

    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${repositoryName.replace('/', '-')}-summary.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const CopyButton: React.FC<{ text: string; section: string }> = ({ text, section }) => (
    <button
      onClick={() => copyToClipboard(text, section)}
      className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
      title="Copy to clipboard"
    >
      {copiedSection === section ? (
        <Check className="w-4 h-4 text-green-500" />
      ) : (
        <Copy className="w-4 h-4" />
      )}
    </button>
  );

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-2xl font-bold text-gray-800 flex items-center space-x-2">
          <BookOpen className="w-6 h-6 text-blue-600" />
          <span>AI Code Summary</span>
        </h3>
        <button
          onClick={downloadSummary}
          className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Download className="w-4 h-4" />
          <span>Download Summary</span>
        </button>
      </div>

      <div className="space-y-6">
        {/* Overview */}
        <div className="border-l-4 border-blue-500 pl-4">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-lg font-semibold text-gray-800 flex items-center space-x-2">
              <BookOpen className="w-5 h-5 text-blue-600" />
              <span>Overview</span>
            </h4>
            <CopyButton text={summary.overview} section="overview" />
          </div>
          <p className="text-gray-700 leading-relaxed">{summary.overview}</p>
        </div>

        {/* Key Features */}
        <div className="border-l-4 border-green-500 pl-4">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-lg font-semibold text-gray-800 flex items-center space-x-2">
              <Star className="w-5 h-5 text-green-600" />
              <span>Key Features</span>
            </h4>
            <CopyButton text={summary.keyFeatures.join('\n• ')} section="features" />
          </div>
          <ul className="space-y-2">
            {summary.keyFeatures.map((feature, index) => (
              <li key={index} className="flex items-start space-x-2 text-gray-700">
                <span className="text-green-500 mt-1">•</span>
                <span>{feature}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* Tech Stack */}
        <div className="border-l-4 border-purple-500 pl-4">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-lg font-semibold text-gray-800 flex items-center space-x-2">
              <Code className="w-5 h-5 text-purple-600" />
              <span>Tech Stack</span>
            </h4>
            <CopyButton text={summary.techStack.join(', ')} section="techstack" />
          </div>
          <div className="flex flex-wrap gap-2">
            {summary.techStack.map((tech, index) => (
              <span
                key={index}
                className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium"
              >
                {tech}
              </span>
            ))}
          </div>
        </div>

        {/* Project Structure */}
        <div className="border-l-4 border-orange-500 pl-4">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-lg font-semibold text-gray-800 flex items-center space-x-2">
              <FolderTree className="w-5 h-5 text-orange-600" />
              <span>Project Structure</span>
            </h4>
            <CopyButton text={summary.projectStructure} section="structure" />
          </div>
          <p className="text-gray-700 leading-relaxed">{summary.projectStructure}</p>
        </div>

        {/* Getting Started */}
        <div className="border-l-4 border-indigo-500 pl-4">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-lg font-semibold text-gray-800 flex items-center space-x-2">
              <Play className="w-5 h-5 text-indigo-600" />
              <span>Getting Started</span>
            </h4>
            <CopyButton text={summary.gettingStarted} section="getting-started" />
          </div>
          <p className="text-gray-700 leading-relaxed">{summary.gettingStarted}</p>
        </div>

        {/* Main Files */}
        <div className="border-l-4 border-teal-500 pl-4">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-lg font-semibold text-gray-800 flex items-center space-x-2">
              <FileText className="w-5 h-5 text-teal-600" />
              <span>Important Files</span>
            </h4>
            <CopyButton text={summary.mainFiles.join('\n')} section="main-files" />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {summary.mainFiles.map((file, index) => (
              <div key={index} className="flex items-center space-x-2 text-gray-700">
                <FileText className="w-4 h-4 text-teal-500" />
                <code className="text-sm bg-gray-100 px-2 py-1 rounded">{file}</code>
              </div>
            ))}
          </div>
        </div>

        {/* Metadata */}
        <div className="flex flex-wrap gap-4 pt-4 border-t border-gray-200">
          <div className="flex items-center space-x-2">
            <TrendingUp className="w-4 h-4 text-gray-500" />
            <span className="text-sm text-gray-600">Complexity:</span>
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getComplexityColor(summary.complexity)}`}>
              {summary.complexity}
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <Clock className="w-4 h-4 text-gray-500" />
            <span className="text-sm text-gray-600">Reading Time:</span>
            <span className="text-sm font-medium text-gray-800">{summary.estimatedReadingTime}</span>
          </div>
        </div>
      </div>
    </div>
  );
};